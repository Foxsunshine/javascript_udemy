{"ast":null,"code":"var _jsxFileName = \"/Users/enari/Desktop/learn react/Tenzies/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport ReactDom from \"react-dom\";\nimport { nanoid } from \"nanoid\";\nimport Die from \"./components/Die\";\n/**\n * Challenge: Update the `rollDice` function to not just roll\n * all new dice, but instead to look through the existing dice\n * to NOT role any that are being `held`.\n *\n * Hint: this will look relatively similiar to the `holdDice`\n * function below. When creating new dice, remember to use\n * `id: nanoid()` so any new dice have an `id` as well.\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n\n  const [dices, setDices] = React.useState(allNewDice());\n\n  function allNewDice() {\n    let arr = [];\n\n    for (let i = 0; i < 10; i++) {\n      arr[i] = {\n        id: nanoid(),\n        value: Math.floor(Math.random() * 6) + 1,\n        isHeld: false\n      };\n    }\n\n    return arr;\n  }\n\n  function rollDice() {\n    setDices(preDices => {\n      return preDices.map(dice => {\n        if (dice.isHeld) return dice;else return { ...dice,\n          value: Math.floor(Math.random() * 6) + 1\n        };\n      });\n    });\n  }\n\n  function holdDice(id) {\n    setDices(preDices => {\n      return preDices.map(dice => {\n        if (dice.id === id) return { ...dice,\n          isHeld: !dice.isHeld\n        };else return dice;\n      });\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"box\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Tenzies\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Roll until all dice are the same. Click each die to freeze it at its current value between rolls.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Die, {\n          dices: dices,\n          holdDice: holdDice\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: rollDice,\n        children: \"Roll\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"P4LQHVqWVCE/NndlSWRGvpZRubo=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","ReactDom","nanoid","Die","App","dices","setDices","useState","allNewDice","arr","i","id","value","Math","floor","random","isHeld","rollDice","preDices","map","dice","holdDice"],"sources":["/Users/enari/Desktop/learn react/Tenzies/src/App.js"],"sourcesContent":["import React from \"react\";\nimport ReactDom from \"react-dom\";\nimport { nanoid } from \"nanoid\";\nimport Die from \"./components/Die\";\n\n/**\n * Challenge: Update the `rollDice` function to not just roll\n * all new dice, but instead to look through the existing dice\n * to NOT role any that are being `held`.\n *\n * Hint: this will look relatively similiar to the `holdDice`\n * function below. When creating new dice, remember to use\n * `id: nanoid()` so any new dice have an `id` as well.\n */\nexport default function App() {\n  const [dices, setDices] = React.useState(allNewDice());\n  function allNewDice() {\n    let arr = [];\n    for (let i = 0; i < 10; i++) {\n      arr[i] = {\n        id: nanoid(),\n        value: Math.floor(Math.random() * 6) + 1,\n        isHeld: false,\n      };\n    }\n    return arr;\n  }\n\n  function rollDice() {\n    setDices((preDices) => {\n      return preDices.map((dice) => {\n        if (dice.isHeld) return dice;\n        else return { ...dice, value: Math.floor(Math.random() * 6) + 1 };\n      });\n    });\n  }\n\n  function holdDice(id) {\n    setDices((preDices) => {\n      return preDices.map((dice) => {\n        if (dice.id === id)\n          return {\n            ...dice,\n            isHeld: !dice.isHeld,\n          };\n        else return dice;\n      });\n    });\n  }\n\n  return (\n    <main>\n      <div className=\"box\">\n        <div>\n          <h3>Tenzies</h3>\n          <p>\n            Roll until all dice are the same. Click each die to freeze it at its\n            current value between rolls.\n          </p>\n        </div>\n        <div>\n          <Die dices={dices} holdDice={holdDice} />\n        </div>\n        <button onClick={rollDice}>Roll</button>\n      </div>\n    </main>\n  );\n}\n"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,OAAOC,GAAP,MAAgB,kBAAhB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,eAAe,SAASC,GAAT,GAAe;EAAA;;EAC5B,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,KAAK,CAACO,QAAN,CAAeC,UAAU,EAAzB,CAA1B;;EACA,SAASA,UAAT,GAAsB;IACpB,IAAIC,GAAG,GAAG,EAAV;;IACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;MAC3BD,GAAG,CAACC,CAAD,CAAH,GAAS;QACPC,EAAE,EAAET,MAAM,EADH;QAEPU,KAAK,EAAEC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,CAA3B,IAAgC,CAFhC;QAGPC,MAAM,EAAE;MAHD,CAAT;IAKD;;IACD,OAAOP,GAAP;EACD;;EAED,SAASQ,QAAT,GAAoB;IAClBX,QAAQ,CAAEY,QAAD,IAAc;MACrB,OAAOA,QAAQ,CAACC,GAAT,CAAcC,IAAD,IAAU;QAC5B,IAAIA,IAAI,CAACJ,MAAT,EAAiB,OAAOI,IAAP,CAAjB,KACK,OAAO,EAAE,GAAGA,IAAL;UAAWR,KAAK,EAAEC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,CAA3B,IAAgC;QAAlD,CAAP;MACN,CAHM,CAAP;IAID,CALO,CAAR;EAMD;;EAED,SAASM,QAAT,CAAkBV,EAAlB,EAAsB;IACpBL,QAAQ,CAAEY,QAAD,IAAc;MACrB,OAAOA,QAAQ,CAACC,GAAT,CAAcC,IAAD,IAAU;QAC5B,IAAIA,IAAI,CAACT,EAAL,KAAYA,EAAhB,EACE,OAAO,EACL,GAAGS,IADE;UAELJ,MAAM,EAAE,CAACI,IAAI,CAACJ;QAFT,CAAP,CADF,KAKK,OAAOI,IAAP;MACN,CAPM,CAAP;IAQD,CATO,CAAR;EAUD;;EAED,oBACE;IAAA,uBACE;MAAK,SAAS,EAAC,KAAf;MAAA,wBACE;QAAA,wBACE;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QADF,eAEE;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QAFF;MAAA;QAAA;QAAA;QAAA;MAAA,QADF,eAQE;QAAA,uBACE,QAAC,GAAD;UAAK,KAAK,EAAEf,KAAZ;UAAmB,QAAQ,EAAEgB;QAA7B;UAAA;UAAA;UAAA;QAAA;MADF;QAAA;QAAA;QAAA;MAAA,QARF,eAWE;QAAQ,OAAO,EAAEJ,QAAjB;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAXF;IAAA;MAAA;MAAA;MAAA;IAAA;EADF;IAAA;IAAA;IAAA;EAAA,QADF;AAiBD;;GArDuBb,G;;KAAAA,G"},"metadata":{},"sourceType":"module"}